
plugins {
    id 'org.gradle.groovy'
    id 'org.gradle.java-gradle-plugin'
    id 'org.gradle.jacoco'
    id 'org.gradle.maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.10'
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'de.undercouch:gradle-download-task:3.3.0'
    implementation 'org.jetbrains.intellij.plugins:structure-base:3.9'
    implementation 'org.jetbrains.intellij.plugins:structure-teamcity:3.9'
    implementation 'org.jetbrains.intellij:plugin-repository-rest-client:0.4.26'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.xmlunit:xmlunit-matchers:2.5.1'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:2.23.0'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

version = '1.2-beta-2'
group = 'com.github.rodm'

sourceSets {
    functionalTest {
        compileClasspath += main.output + configurations.testRuntimeClasspath
        runtimeClasspath += main.output + configurations.testRuntimeClasspath
        groovy {
            srcDir 'src/functional/groovy'
        }
    }
    samples {
        compileClasspath += main.output + configurations.testRuntimeClasspath
        runtimeClasspath += main.output + configurations.testRuntimeClasspath
    }
}

gradlePlugin {
    testSourceSets sourceSets.functionalTest, sourceSets.samples
}

task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    jvmArgs "-XX:MaxPermSize=512m"
}

task samplesTest(type: Test) {
    description = 'Runs the sample builds.'
    group = 'verification'
    testClassesDirs = sourceSets.samples.output.classesDirs
    classpath = sourceSets.samples.runtimeClasspath
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        plugin(MavenPublication) {
            from components.java
        }
    }
}

pluginBundle {
    website = 'https://github.com/rodm/gradle-teamcity-plugin'
    vcsUrl = 'https://github.com/rodm/gradle-teamcity-plugin'
    description = 'Gradle plugin for developing TeamCity plugins'
    tags = ['teamcity']

    plugins {
        teamcityServerPlugin {
            id = 'com.github.rodm.teamcity-server'
            displayName = 'Gradle TeamCity Server plugin'
        }
        teamcityAgentPlugin {
            id = 'com.github.rodm.teamcity-agent'
            displayName = 'Gradle TeamCity Agent plugin'
        }
        teamcityCommonPlugin {
            id = 'com.github.rodm.teamcity-common'
            displayName = 'Gradle TeamCity Common API plugin'
        }
        teamcityEnvironmentsPlugin {
            id = 'com.github.rodm.teamcity-environments'
            displayName = 'Gradle TeamCity Environments plugin'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
    }
}
